diff -r 8667c26e2bec Include/ceval.h
--- a/Include/ceval.h	Mon Jun 15 09:11:37 2015 -0700
+++ b/Include/ceval.h	Mon Aug 31 14:44:51 2015 -0700
@@ -10,6 +10,11 @@
 PyAPI_FUNC(PyObject *) PyEval_CallObjectWithKeywords(
     PyObject *, PyObject *, PyObject *);
 
+PyAPI_FUNC(PyObject *) _PyEval_EvalCodeWithName(PyObject *_co, PyObject *globals, PyObject *locals,
+PyObject **args, int argcount, PyObject **kws, int kwcount,
+PyObject **defs, int defcount, PyObject *kwdefs, PyObject *closure,
+PyObject *name, PyObject *qualname);
+
 /* Inline this */
 #define PyEval_CallObject(func,arg) \
     PyEval_CallObjectWithKeywords(func, arg, (PyObject *)NULL)
@@ -113,6 +118,7 @@
 PyAPI_FUNC(PyObject *) PyEval_GetCallStats(PyObject *);
 PyAPI_FUNC(PyObject *) PyEval_EvalFrame(struct _frame *);
 PyAPI_FUNC(PyObject *) PyEval_EvalFrameEx(struct _frame *f, int exc);
+PyAPI_FUNC(PyObject *) PyEval_EvalFrameEx_NoJit(struct _frame *f, int exc);
 
 /* Interface for threads.
 
diff -r 8667c26e2bec Include/code.h
--- a/Include/code.h	Mon Jun 15 09:11:37 2015 -0700
+++ b/Include/code.h	Mon Aug 31 14:44:51 2015 -0700
@@ -7,6 +7,23 @@
 extern "C" {
 #endif
 
+struct _frame;
+
+typedef PyObject* (__stdcall*  Py_EvalFunc)(void*, struct _frame*);
+
+PyAPI_DATA(PyTypeObject) PyJittedCode_Type;
+
+/* Jitted code object.  This object is returned from the JIT implementation.  The JIT can allocate
+   a jitted code object and fill in the state for which is necessary for it to perform an evaluation. */
+typedef struct {
+    PyObject_HEAD
+    Py_EvalFunc j_evalfunc;
+    void* j_evalstate;          /* opaque value, allows the JIT to track any relevant state */
+} PyJittedCode;
+
+/* Creates a new PyJittedCode object which can have the eval function and state populated. */
+PyAPI_FUNC(PyObject*) PyJittedCode_New();
+
 /* Bytecode object */
 typedef struct {
     PyObject_HEAD
@@ -35,8 +52,12 @@
 				   Objects/lnotab_notes.txt for details. */
     void *co_zombieframe;     /* for optimization only (see frameobject.c) */
     PyObject *co_weakreflist;   /* to support weakrefs to code objects */
+    PyJittedCode* co_jitted;    /* Jitted code object */
+    int co_compilefailed;       /* Set to 1 if the compilation has failed and won't be tried again*/
+    int co_runcount;            /* The number of times the code object has been invoked */
 } PyCodeObject;
 
+
 /* Masks for co_flags above */
 #define CO_OPTIMIZED	0x0001
 #define CO_NEWLOCALS	0x0002
diff -r 8667c26e2bec Include/dictobject.h
--- a/Include/dictobject.h	Mon Jun 15 09:11:37 2015 -0700
+++ b/Include/dictobject.h	Mon Aug 31 14:44:51 2015 -0700
@@ -138,7 +138,7 @@
 PyAPI_FUNC(void) _PyDict_DebugMallocStats(FILE *out);
 
 int _PyObjectDict_SetItem(PyTypeObject *tp, PyObject **dictptr, PyObject *name, PyObject *value);
-PyObject *_PyDict_LoadGlobal(PyDictObject *, PyDictObject *, PyObject *);
+PyAPI_FUNC(PyObject *) _PyDict_LoadGlobal(PyDictObject *, PyDictObject *, PyObject *);
 #endif
 
 #ifdef __cplusplus
diff -r 8667c26e2bec Include/pystate.h
--- a/Include/pystate.h	Mon Jun 15 09:11:37 2015 -0700
+++ b/Include/pystate.h	Mon Aug 31 14:44:51 2015 -0700
@@ -12,6 +12,8 @@
 
 struct _ts; /* Forward */
 struct _is; /* Forward */
+typedef void*(__stdcall *CompileFunction)(PyObject*);
+typedef void(__stdcall *JitInitFunction)();
 
 #ifdef Py_LIMITED_API
 typedef struct _is PyInterpreterState;
@@ -41,6 +43,7 @@
 #endif
 
     PyObject *builtins_copy;
+	CompileFunction jitcompile;
 } PyInterpreterState;
 #endif
 
diff -r 8667c26e2bec Lib/encodings/aliases.py
--- a/Lib/encodings/aliases.py	Mon Jun 15 09:11:37 2015 -0700
+++ b/Lib/encodings/aliases.py	Mon Aug 31 14:44:51 2015 -0700
@@ -1,4 +1,4 @@
-""" Encoding Aliases Support
+﻿""" Encoding Aliases Support
 
     This module is used by the encodings package search function to
     map encodings names to module names.
@@ -15,6 +15,7 @@
         aliases have also been added.
 
 """
+
 aliases = {
 
     # Please keep this list sorted alphabetically by value !
diff -r 8667c26e2bec Lib/importlib/_bootstrap.py
--- a/Lib/importlib/_bootstrap.py	Mon Jun 15 09:11:37 2015 -0700
+++ b/Lib/importlib/_bootstrap.py	Mon Aug 31 14:44:51 2015 -0700
@@ -1,4 +1,4 @@
-"""Core implementation of import.
+﻿"""Core implementation of import.
 
 This module is NOT meant to be directly imported! It has been designed such
 that it can be bootstrapped into Python as the implementation of import. As
diff -r 8667c26e2bec Lib/importlib/_bootstrap_external.py
--- a/Lib/importlib/_bootstrap_external.py	Mon Jun 15 09:11:37 2015 -0700
+++ b/Lib/importlib/_bootstrap_external.py	Mon Aug 31 14:44:51 2015 -0700
@@ -1,4 +1,4 @@
-"""Core implementation of path-based import.
+﻿"""Core implementation of path-based import.
 
 This module is NOT meant to be directly imported! It has been designed such
 that it can be bootstrapped into Python as the implementation of import. As
diff -r 8667c26e2bec Objects/codeobject.c
--- a/Objects/codeobject.c	Mon Jun 15 09:11:37 2015 -0700
+++ b/Objects/codeobject.c	Mon Aug 31 14:44:51 2015 -0700
@@ -7,6 +7,7 @@
 
 /* all_name_chars(s): true iff all chars in s are valid NAME_CHARS */
 
+
 static int
 all_name_chars(PyObject *o)
 {
@@ -152,6 +153,9 @@
     co->co_lnotab = lnotab;
     co->co_zombieframe = NULL;
     co->co_weakreflist = NULL;
+    co->co_jitted = NULL;
+    co->co_compilefailed = 0;
+    co->co_runcount = 0;
     return co;
 }
 
@@ -542,6 +546,61 @@
     code_new,                           /* tp_new */
 };
 
+static PyObject *
+jittedcode_new(PyTypeObject *type, PyObject *args, PyObject *kwargs)
+{
+    if (PyTuple_GET_SIZE(args) || (kwargs && PyDict_Size(kwargs))) {
+        PyErr_SetString(PyExc_TypeError, "JittedCode takes no arguments");
+        return NULL;
+    }
+    return PyJittedCode_New(0);
+}
+
+PyObject* PyJittedCode_New() {
+    return PyObject_New(PyJittedCode, &PyJittedCode_Type);
+}
+
+PyTypeObject PyJittedCode_Type = {
+    PyVarObject_HEAD_INIT(&PyType_Type, 0)
+    "jittedcode",                       /* tp_name */
+    sizeof(PyJittedCode),               /* tp_basicsize */
+    0,                                  /* tp_itemsize */
+    0,                                  /* tp_dealloc */
+    0,                                  /* tp_print */
+    0,                                  /* tp_getattr */
+    0,                                  /* tp_setattr */
+    0,                                  /* tp_reserved */
+    0,                                  /* tp_repr */
+    0,                                  /* tp_as_number */
+    0,                                  /* tp_as_sequence */
+    0,                                  /* tp_as_mapping */
+    0,                                  /* tp_hash */
+    0,                                  /* tp_call */
+    0,                                  /* tp_str */
+    0,                                  /* tp_getattro */
+    0,                                  /* tp_setattro */
+    0,                                  /* tp_as_buffer */
+    Py_TPFLAGS_DEFAULT,                 /* tp_flags */
+    0,                                  /* tp_doc */
+    0,                                  /* tp_traverse */
+    0,                                  /* tp_clear */
+    0,                                  /* tp_richcompare */
+    0,                                  /* tp_weaklistoffset */
+    0,                                  /* tp_iter */
+    0,                                  /* tp_iternext */
+    0,                                  /* tp_methods */
+    0,                                  /* tp_members */
+    0,                                  /* tp_getset */
+    0,                                  /* tp_base */
+    0,                                  /* tp_dict */
+    0,                                  /* tp_descr_get */
+    0,                                  /* tp_descr_set */
+    0,                                  /* tp_dictoffset */
+    0,                                  /* tp_init */
+    0,                                  /* tp_alloc */
+    jittedcode_new,                     /* tp_new */
+};
+
 /* Use co_lnotab to compute the line number from a bytecode index, addrq.  See
    lnotab_notes.txt for the details of the lnotab representation.
 */
diff -r 8667c26e2bec Objects/object.c
--- a/Objects/object.c	Mon Jun 15 09:11:37 2015 -0700
+++ b/Objects/object.c	Mon Aug 31 14:44:51 2015 -0700
@@ -1787,12 +1787,12 @@
 _Py_PrintReferences(FILE *fp)
 {
     PyObject *op;
-    fprintf(fp, "Remaining objects:\n");
+    fprintf(fp, "Remaining objects:\r\n");
     for (op = refchain._ob_next; op != &refchain; op = op->_ob_next) {
-        fprintf(fp, "%p [%" PY_FORMAT_SIZE_T "d] ", op, op->ob_refcnt);
+        fprintf(fp, "[%" PY_FORMAT_SIZE_T "d] ", op->ob_refcnt);
         if (PyObject_Print(op, fp, 0) != 0)
             PyErr_Clear();
-        putc('\n', fp);
+        putc('\r\n', fp);
     }
 }
 
diff -r 8667c26e2bec Objects/obmalloc.c
--- a/Objects/obmalloc.c	Mon Jun 15 09:11:37 2015 -0700
+++ b/Objects/obmalloc.c	Mon Aug 31 14:44:51 2015 -0700
@@ -1175,6 +1175,7 @@
     uint size;
 
     _Py_AllocatedBlocks++;
+	//printf("Allocated: %d\r\n", _Py_AllocatedBlocks);
 
     assert(nelem <= PY_SSIZE_T_MAX / elsize);
     nbytes = nelem * elsize;
diff -r 8667c26e2bec Objects/typeobject.c
--- a/Objects/typeobject.c	Mon Jun 15 09:11:37 2015 -0700
+++ b/Objects/typeobject.c	Mon Aug 31 14:44:51 2015 -0700
@@ -7208,6 +7208,7 @@
             return -1;
         }
         if (co->co_argcount == 0) {
+			assert(0);
             PyErr_SetString(PyExc_RuntimeError,
                             "super(): no arguments");
             return -1;
diff -r 8667c26e2bec Python/ceval.c
--- a/Python/ceval.c	Mon Jun 15 09:11:37 2015 -0700
+++ b/Python/ceval.c	Mon Aug 31 14:44:51 2015 -0700
@@ -796,6 +796,31 @@
 PyObject *
 PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
 {
+    if (f->f_code->co_jitted != NULL) {
+        return f->f_code->co_jitted->j_evalfunc(f->f_code->co_jitted->j_evalstate, f);
+    }
+
+    if (!f->f_code->co_compilefailed /*&& f->f_code->co_runcount++ >20 */) {
+        PyThreadState *tstate = PyThreadState_GET();
+        if (tstate->interp->jitcompile != NULL) {
+            f->f_code->co_jitted = tstate->interp->jitcompile((PyObject*)f->f_code);
+            if (f->f_code->co_jitted != NULL) {
+                // execute the jitted code...
+                return f->f_code->co_jitted->j_evalfunc(f->f_code->co_jitted->j_evalstate, f);
+            }
+
+            // no longer try and compile this method...
+            f->f_code->co_compilefailed = 1;
+        }
+    }
+
+    return PyEval_EvalFrameEx_NoJit(f, throwflag);
+}
+
+
+PyObject *
+PyEval_EvalFrameEx_NoJit(PyFrameObject *f, int throwflag)
+{
 #ifdef DXPAIRS
     int lastopcode = 0;
 #endif
@@ -1170,7 +1195,7 @@
 
        f->f_lasti now refers to the index of the last instruction
        executed.  You might think this was obvious from the name, but
-       this wasn't always true before 2.3!  PyFrame_New now sets
+       this wasn't always true before 2.3!  PyFrame_New now setsYIELD_
        f->f_lasti to -1 (i.e. the index *before* the first instruction)
        and YIELD_VALUE doesn't fiddle with f_lasti any more.  So this
        does work.  Promise.
@@ -1203,7 +1228,7 @@
     }
 
 #ifdef LLTRACE
-    lltrace = _PyDict_GetItemId(f->f_globals, &PyId___ltrace__) != NULL;
+	lltrace = _PyDict_GetItemId(f->f_globals, &PyId___ltrace__) != NULL;
 #endif
 
     why = WHY_NOT;
@@ -2138,6 +2163,7 @@
                 goto fast_block_end;
             }
             else if (status != Py_None) {
+				assert(FALSE);
                 PyErr_SetString(PyExc_SystemError,
                     "'finally' pops bad exception");
                 Py_DECREF(status);
@@ -4242,8 +4268,13 @@
 prtrace(PyObject *v, char *str)
 {
     printf("%s ", str);
-    if (PyObject_Print(v, stdout, 0) != 0)
-        PyErr_Clear(); /* Don't know what else to do */
+	if (!PyErr_Occurred) {
+		if (PyObject_Print(v, stdout, 0) != 0)
+			PyErr_Clear(); /* Don't know what else to do */
+	}
+	else{
+		printf("Can't print during error...");
+	}
     printf("\n");
     return 1;
 }
@@ -4936,6 +4967,7 @@
             t = PySequence_Tuple(stararg);
             if (t == NULL) {
                 if (PyErr_ExceptionMatches(PyExc_TypeError)) {
+					assert(FALSE);
                     PyErr_Format(PyExc_TypeError,
                                  "%.200s%.200s argument after * "
                                  "must be a sequence, not %.200s",
diff -r 8667c26e2bec Python/pylifecycle.c
--- a/Python/pylifecycle.c	Mon Jun 15 09:11:37 2015 -0700
+++ b/Python/pylifecycle.c	Mon Aug 31 14:44:51 2015 -0700
@@ -321,6 +321,18 @@
     if (interp == NULL)
         Py_FatalError("Py_Initialize: can't make first interpreter");
 
+	HMODULE pyjit = LoadLibrary("pyjit.dll");
+	if (pyjit != NULL) {
+		interp->jitcompile = (CompileFunction)GetProcAddress(pyjit, "JitCompile");
+		if (interp->jitcompile != NULL) {
+			JitInitFunction jitinit = (JitInitFunction)GetProcAddress(pyjit, "JitInit");
+			jitinit();
+		}
+	}
+	else {
+		interp->jitcompile = NULL;
+	}
+
     tstate = PyThreadState_New(interp);
     if (tstate == NULL)
         Py_FatalError("Py_Initialize: can't make first thread");
@@ -687,7 +699,7 @@
      * An address can be used to find the repr of the object, printed
      * above by _Py_PrintReferences.
      */
-    if (Py_GETENV("PYTHONDUMPREFS"))
+    if (Py_GETENV("PYTHONDUMPREFS2"))
         _Py_PrintReferenceAddresses(stderr);
 #endif /* Py_TRACE_REFS */
 #ifdef PYMALLOC_DEBUG
